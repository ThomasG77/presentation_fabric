# <img src="images/logo_fabric.png" style="float: left;">Fabric, un outil pour déployer ses projets<br/><small style="color:#ffcc39;">Thomas Gratier</small>

# Des manières de déployer

## A la mano

-   Répétitif
-   Risqué
-   Non traçablef

![](images/error.jpg)

## Approche fichiers

-   FTP / SCP / Rsync
-   Gestionnaires de version + hooks

![](images/tree_folder.png)

## Approche services

-   Services online de déploiement
-   PaaS
-   Intégration continue

![](images/data_center.jpg)

<div class="notes">
</div>

## Approche "deploy as code"

-   Déploiement SSH via ligne de commande
-   Logiciels de déploiement automatique, centralisés ou non.

![](images/DevOpsDays.png)

# Et Fabric dans tout ça?

## De l'usage

-   Simple développeur avec quelques connaissances Sysadmin
-   Besoin de versionner
-   Nécessité d'automatiser
-   Montée en compétences en un temps limité
-   Réutilisation de ses connaissances

## Un choix par opposition

-   Ne pas dépendre de services tiers
-   Ne pas apprendre de DSL
-   Bash puissant mais pas "cross platform", de plus bas niveau que Python

![](images/ying_yang.jpg)

# Enfin un peu de technique

## Installation

-   Installer Python 2.x, setuptools
-   Dépendances Paramiko et PyCrypto (pour SSH)
-   Lancer

        pip install fabric

## Jouer

-   Créer un fichier fabfile.py
-   Insérer le contenu ci-dessous

        #!/usr/bin/env python
        # -*- coding: utf-8 -*-
        
        from fabric.api import *

        # Utilisateur pour la connexion distante
    
        env.user = 'utilisateurapplication'
    
        # Urls des serveurs de déploiement
    
        env.hosts = ['server1.exemple.com', 'server2.exemple.com']
		
		def deploy():
		    ...
		
-   Exécuter avec

        fab -H server1.exemple.com deploy

# Un aperçu plus complet

## Les commandes de base

-   Exécuter des commandes locales (**local**)
-   Exécuter des commandes distantes (**run** et **sudo**)
-   Envoyer ou récupérer des fichiers distants (**get**, **put**)
-   Gérer des environnements, comme la gestion des chemins système en distant (**context_managers**)


## Les contributions

-   Manipuler des fichiers (**append**, **exists**, **contains**, **sed**, **comment**)
-   Gérer Rsync, envoyer un projet, utiliser des templates

# Passer au niveau supérieur

## Fabtools, le facilitateur

Un outil fournissant des helpers de plus haut niveau pour Fabric.

Installer avec

    pip install fabtools
    
Dans le fabfile.py

    from fabric.api import *
    from fabtools import require
    import fabtools
    
    deploy():
        require.deb.packages([
            'imagemagick',
            'libxml2-dev',
        ])

## Gérer les logiciels de l'OS et le versionning (1/2)

-   Installation de paquets (**require.deb**, **require.rpm**)

        require.deb.packages([
            'imagemagick',
            'libxml2-dev',
        ])
        
-   Installation de serveur et configuration (**require.apache**, **require.nginx**, **require.tomcat**, **require.nodejs**)

        require.apache.server()
        
        fabtools.require.apache.site_enabled(config)

## Gérer les logiciels de l'OS et le versionning (2/2)

-   Bases de données (**fabtools.mysql**, **fabtools.postgres**)

        require.postgres.server()
        require.postgres.user('myuser', 's3cr3tp4ssw0rd')
        require.postgres.database('myappsdb', 'myuser')
        
-   Versionning (**fabtools.git**, **fabtools.mercurial**)
    
        fabtools.require.git.working_copy(remote_url, path=None, branch='master', update=True, use_sudo=False, user=None)

## Gérer des éléments système

-   Services et processus (**fabtools.service**, **fabtools.systemd**, **fabtools.cron**)

        cron.add_task('cleanup', '@monthly', 'alice', '/home/alice/bin/cleanup.sh')
    
-   Groupes et utilisateurs (**fabtools.group**, **fabtools.user**)
    
        if not fabtools.user.exists('alice'):
            fabtools.user.create('alice')

-   Informations réseaux (**fabtools.network**)
-   Vagrant (**fabtools.vagrant**)

# Allez plus loin

## Sites officiels

-   Site de Fabric
    <a href="http://www.fabfile.org">http://www.fabfile.org</a>

-   Site de Fabtools
    <a href="http://fabtools.readthedocs.org">http://fabtools.readthedocs.org</a>

## Bonus

* Article de Chris Coyier sur un éventail des solutions pour le déploiement <a href="http://css-tricks.com/deployment/">http://css-tricks.com/deployment/</a>
* Présentation de Ronan Amicel, le développeur principal de Fabtools <a href="http://fr.slideshare.net/ronan.amicel/je-configure-mes-serveurs-avec-fabric-et-fabtools">http://fr.slideshare.net/ronan.amicel/je-configure-mes-serveurs-avec-fabric-et-fabtools</a>

## Crédits photos


-   [Error](https://www.flickr.com/photos/nickwebb/3016498475/) par Nick J Webb
    [CC BY 2.0](https://creativecommons.org/licenses/by/2.0/)

-   [Folder Tree](http://thenounproject.com/term/folder-tree/27307/) par Juan Pablo Bravo (via The Noun Project)
    [CC BY 3.0](http://creativecommons.org/licenses/by/3.0/us/)
    
-   [Data center](https://www.flickr.com/photos/small_realm/11189803153/) par BobMical
    [CC BY 2.0](https://creativecommons.org/licenses/by/2.0/)

-   [DevOps](http://rennesdevops.fr/wp-content/uploads/2013/04/DevOpsDays.png)

-   [Ying Yang](https://www.flickr.com/photos/easyflow/3377137372/) par easyflow
    [CC BY 2.0](https://creativecommons.org/licenses/by/2.0/)
    
